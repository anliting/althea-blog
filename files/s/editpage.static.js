Object.entries({"../l/Blog/Page.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function html_stars(rating){\n        let output=''\n        for(let i=0;i<5;i++){\n            output+=\"<img src=images/\"+(\n                2*i+2<=rating?\n                    'star-full'\n                :2*i+1<=rating?\n                    'star-half'\n                :\n                    'star-empty'\n            )+\".png style=width:18px>\"\n        }\n        return output\n    }\n    function tableofcontents(e){\n        let\n            id_page=e.parentNode.id.substr(13,e.parentNode.id.length),\n            s=[0],\n            v,\n            a\n        v=e\n        a=e.parentNode.getElementsByClassName('tablethis')\n        for(let i=0;i<a.length;i++){\n            let p=a[i]\n            p.id='h'+id_page+'_'+i\n            let r=+p.tagName[1]\n            while(s[s.length-1]>r){\n                s.pop()\n                v=v.parentNode.parentNode\n            }\n            if(s[s.length-1]==r)\n                v=v.parentNode\n            if(s[s.length-1]<r){\n                s.push(r)\n                v.appendChild(dom('ul'))\n                v=v.lastChild\n            }\n            v.appendChild(li(p))\n            v=v.lastChild\n        }\n        function li(p){\n            return dom('li',a_href(p))\n        }\n        function a_href(p){\n            return dom('a',{\n                innerHTML:p.innerHTML,\n                href:location.href+'#'+p.id,\n            })\n        }\n    }\n    function star_all(e){\n        let a=e.getElementsByClassName('star')\n        for(let i=0;i<a.length;i++){\n            a[i].innerHTML=html_stars(a[i].innerHTML)\n            a[i].style.visibility='visible'\n        }\n    }\n    function tableofcontents_all(e){\n        let a=e.getElementsByClassName('tableofcontents')\n        for(let i=0;i<a.length;i++){\n            tableofcontents(a[i])\n            a[i].style.visibility='visible'\n        }\n    }\n    return({\n        star_all,\n        tableofcontents_all,\n    })\n})()\n","../l/Blog/loadPagemodules.js":"async function loadPagemodules(blog){\n    let[\n        Pagemodule,\n        pagemodules,\n    ]=await Promise.all([\n        module.repository.blog.Pagemodule,\n        blog._site.then(site=>\n            site.send('getPagemodules')\n        ),\n    ])\n    pagemodules.map(p=>\n        blog.pagemodules.push(new Pagemodule(\n            p.id,\n            p.priority,\n            p.name,\n            p.definitions\n        ))\n    )\n    return blog\n}\nloadPagemodules\n","../l/Blog/path.js":"module.repository.althea.site.then(site=>{\n    function calcPathByStatus(status){\n        if('pageId' in status)\n            return site.path.blog.page(status.pageId)\n        if('tagNames' in status)\n            return site.path.blog.tag(status.tagNames)\n        return site.path.blog.root\n    }\n    function getHrefByPage(page){\n        return site.path.blog.page(page.id)\n    }\n    function getHrefByTags(tags){\n        return site.path.blog.tag(tags)\n    }\n    return{\n        calcPathByStatus,\n        getHrefByPage,\n        getHrefByTags,\n    }\n})\n","../l/Blog/prototype._anchor_addTag.js":"(async()=>{\n    let[\n        dom,\n        path,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('path.js'),\n    ])\n    function anchor_addTag(tag){\n        let\n            tagsToSelect=(this.status.tagNames||[]).slice()\n        tagsToSelect.push(tag.name)\n        let\n            a=dom('a',tag.name)\n        a.className='addTag'\n        a.href=path.getHrefByTags(tagsToSelect)\n        a.onclick=e=>{\n            if(\n                e.which!=1||\n                e.ctrlKey||\n                e.shiftKey\n            )\n                return\n            e.preventDefault()\n            e.stopPropagation()\n            this.status={\n                tagNames:tagsToSelect.slice()\n            }\n        }\n        return a\n    }\n    return anchor_addTag\n})()\n","../l/Blog/prototype._getNext/update_to_content.js":"(async()=>{\n    let\n        Page=       await module.repository.blog.Page,\n        BlogPage=   Page.BlogPage\n    return update_to_content\n    async function update_to_content(process,pages){\n        let site=await this._site\n        pages=await Promise.all(pages.map(async p=>{\n            let page=await site.getPage(p)\n            let res=await Promise.all([\n                page.load([\n                    'preferredPagename',\n                    'page_derived_from',\n                    'page_derived_to',\n                    'author',\n                    'timestamp_insert',\n                    'timestamp_lastmodified',\n                ]),\n                page.lastversion.then(pageVersion=>pageVersion.load([\n                    'public',\n                    'title',\n                    'content',\n                    'id_pagemodule',\n                ])),\n            ]).then(vals=>({\n                page:vals[0],\n                pageVersion:vals[1],\n            }))\n            page=new BlogPage(\n                this,\n                res.page.id,\n                res.pageVersion.public,\n                res.pageVersion.title,\n                res.pageVersion.id_pagemodule\n            )\n            this.pages[page.id]=page\n            page.preferredPagename=     res.page.preferredPagename\n            page.page_derived_from=     res.page.page_derived_from\n            page.page_derived_to=       res.page.page_derived_to\n            page.content=               res.pageVersion.content\n            page.authorId=              res.page.author\n            page.timestamp_insert=      res.page.timestamp_insert\n            page.datetime_lastmodified= res.page.timestamp_lastmodified\n            let pv=await res.pageVersion.load('tags')\n            page.tags=pv.tags.sort((a,b)=>a.localeCompare(b))\n            return page\n        }))\n        await site.load\n        if(!process.continue)\n            return\n        pages.map(page=>{\n            this.emit('pageLoad',page)\n        })\n        if(process.status.pageId){\n            document.title=\n                this.pages[process.status.pageId].title+\n                ' - '+\n                site.name\n        }else{\n            document.title=site.name\n        }\n    }\n})()\n","../l/Blog/prototype._getNext.js":"Promise.all([\n    module.shareImport('prototype._getNext/update_to_content.js')\n]).then(modules=>{\n    let update_to_content=modules[0]\n    async function _getNext(){\n        this.getting=this.getting||0\n        this.getting++\n        let\n            process={\n                status:this._status,\n                continue:1\n            }\n        this.once('statusChange',()=>\n            process.continue=0\n        )\n        let data=await this._site.then(site=>\n            site.send({\n                function:       'getSuggestedPages',\n                page:           process.status.pageId||0,\n                pageversion:    process.status.pageversionId||0,\n                tags_selected:  process.status.tagNames||[],\n                pages_loaded:   this.pages_loaded,\n            })\n        )\n        await this._loadPagemodules\n        await update_to_content.call(this,process,data.slice(0,4))\n        this.getting--\n    }\n    return _getNext\n})\n","../l/Blog/prototype.view/BlogView.js":";(async()=>{\n    let[\n        dom,\n        install_datalist_tags_suggested,\n        createHeader,\n        keydown,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('install_datalist_tags_suggested.js'),\n        module.shareImport('createHeader.js'),\n        module.shareImport('prototype.keydown.js'),\n    ])\n    function createContents(blog){\n        let div=dom('div')\n        div.className='contents'\n        blog.on('pageLoad',page=>{\n            div.appendChild(page.view.domElement)\n        })\n        blog.on('statusChange',()=>{\n            div.innerHTML=''\n        })\n        return div\n    }\n    function createFooter(view){\n        let div=dom('div')\n        div.className='footer'\n        view.blog._site.then(async site=>{\n            let res=await site.send('getBlogFooter')\n            div.innerHTML=res\n        })\n        return div\n    }\n    function BlogView(blog){\n        this.blog=blog\n        this.div=dom('div')\n        this.div.className='blog'\n        install_datalist_tags_suggested(this)\n        {\n            let s=dom('style')\n            let u=()=>\n                this.blog._styles.map(n=>\n                    s.appendChild(n)\n                )\n            u()\n            this.blog.on('_style',u)\n            this.style=Promise.resolve(s)\n            module.get('blog.css').then(s=>\n                blog._style(document.createTextNode(s))\n            )\n        }\n        this.div.appendChild(createHeader(blog,this))\n        this.div.appendChild(createContents(blog))\n        this.div.appendChild(createFooter(this))\n    }\n    BlogView.prototype.hideSuggestedTags=function(){\n        this.tagsDiv.style.display='none'\n    }\n    BlogView.prototype.keydown=keydown\n    BlogView.prototype.setupSuggestedTags=async function(){\n        let\n            view=this,\n            blog=this.blog\n        let vals=await Promise.all([\n            module.shareImport('initialize_tags_suggested.js'),\n            module.shareImport('use_list_tags__count_suggested.js'),\n            blog._site.then(site=>\n                site.send({\n                    function:'getSuggestedTags',\n                    tags:blog.status.tagNames||[]\n                })\n            ),\n        ])\n        let\n            initialize_tags_suggested=vals[0],\n            use_list_tags__count_suggested=vals[1],\n            res=vals[2]\n        initialize_tags_suggested(view.tagsDiv)\n        use_list_tags__count_suggested(\n            view,\n            res,\n            view.tagsDiv\n        )\n        view.tagsDiv.style.display=''\n    }\n    return BlogView\n})()\n","../l/Blog/prototype.view/blog.css":"body{\n    margin:0px;\n}\n.a_hideshow{\n    float:left;\n}\n.a_comment{\n    float:left;\n}\n.a_dfspage{\n    float:left;\n}\n.a_editpage{\n    float:left;\n}\n.a_deletepage{\n    float:left;\n}\n.a_removepage{\n    float:left;\n}\n","../l/Blog/prototype.view/createHeader/checkSetupIndex.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    async function checkSetupIndex(blog,div){\n        if(!blog.status.tagNames)\n            return\n        let a\n        {\n            let\n                vals=await Promise.all([\n                    blog._site,\n                    getPagesByTags(),\n                ]),\n                site=vals[0],\n                pages=vals[1]\n            a=await Promise.all(pages.map(async id=>{\n                let page=await site.getPage(id)\n                let pageversion=await(await page.lastversion).load([\n                    'public',\n                    'title'\n                ])\n                return{\n                    page,\n                    public:pageversion.public,\n                    title:pageversion.title,\n                }\n            }))\n        }\n        a.sort((a,b)=>a.title.localeCompare(b.title))\n        chunks(a,12).map(a=>{\n            let ul=dom('ul')\n            ul.style.float='left'\n            for(let p of a){\n                let\n                    li=dom('li'),\n                    a=p.page.a\n                if(!p.public)\n                    a.style.color='black'\n                a.addEventListener('click',e=>{\n                    if(\n                        e.which!=1||\n                        e.ctrlKey||\n                        e.shiftKey\n                    )\n                        return\n                    e.preventDefault()\n                    e.stopPropagation()\n                    blog.status={\n                        pageId:p.page.id\n                    }\n                })\n                li.appendChild(a)\n                ul.appendChild(li)\n            }\n            div.appendChild(ul)\n        })\n        div.appendChild(createClearBothDiv())\n        function createClearBothDiv(){\n            let div=dom('div')\n            div.style.clear='both'\n            return div\n        }\n        async function getPagesByTags(){\n            return(await blog._site).send({\n                function:'getPagesByTags',\n                tags:blog.status.tagNames\n            })\n        }\n        function chunks(a,n){\n            let res=[]\n            for(let i=0;i*n<a.length;i++)\n                res.push(a.slice(i*n,(i+1)*n))\n            return res\n        }\n    }\n    return checkSetupIndex\n})()\n","../l/Blog/prototype.view/createHeader/createInput.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function createInput(blog,view){\n        let input=dom('input')\n        input.setAttribute('list',view.datalist_input_searchForTag.id)\n        input.addEventListener('keydown',e=>{\n            if(e.keyCode!=13)\n                return\n            e.preventDefault()\n            e.stopPropagation()\n            let tagToAdd=input.value\n            input.value=''\n            let tagsToSelect=blog.status.tagNames?\n                blog.status.tagNames.slice()\n            :\n                []\n            tagsToSelect.push(tagToAdd)\n            if(e.shiftKey)\n                module.shareImport('../path.js').then(path=>{\n                    open(path.getHrefByTags(\n                        tagsToSelect\n                    ),'_blank').focus()\n                })\n            else\n                blog.status={tagNames:tagsToSelect}\n        })\n        input.addEventListener('focus',()=>{\n            view.setupSuggestedTags()\n        })\n        /*input.addEventListener('blur',()=>{\n            view.hideSuggestedTags()\n        })*/\n        return input\n    }\n    return createInput\n})()\n","../l/Blog/prototype.view/createHeader/createNavigationBar/event.js":"({\n    onceClickOrBlurButNotMouseDown(n,listener){\n        let mousedown=false\n        let l=e=>{\n            if(mousedown)\n                return\n            n.removeEventListener('click',l)\n            n.removeEventListener('blur',l)\n            n.removeEventListener('mousedown',onmousedown)\n            listener()\n        },onmousedown=e=>{\n            mousedown=true\n            addEventListener('mouseup',e=>\n                mousedown=false\n            ,{once:true})\n        }\n        n.addEventListener('click',l)\n        n.addEventListener('blur',l)\n        n.addEventListener('mousedown',onmousedown)\n    }\n})\n","../l/Blog/prototype.view/createHeader/createNavigationBar/userA.js":";(async()=>{\n    let[dom,event]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.event,\n    ])\n    function userA(blog,div,u){\n        let a=dom('a',u.username)\n        a.href='javascript:'\n        a.onclick=e=>{\n            e.preventDefault()\n            e.stopPropagation()\n            let n=userDiv(blog,u)\n            event.onceClickOrBlurButNotMouseDown(n,()=>div.removeChild(n))\n            dom(div,n)\n            n.focus()\n        }\n        return a\n    }\n    function userDiv(blog,u){\n        let div=dom('div',innerDiv(blog,u),{tabIndex:0})\n        div.style.position='relative'\n        div.style.outline='none'\n        div.style.height='0'\n        div.style.width='100%'\n        div.style.top='8px'\n        return div\n    }\n    function innerDiv(blog,u){\n        return dom('div',\n            logoutA(blog),\n            dom('br'),\n            dom('a','Profile',{href:`user/${u.username}`}),\n            u.isadmin&&[\n                dom('br'),\n                dom('a','Drive',{href:`home/${u.username}`}),\n                dom('br'),\n                dom('a','Settings',{href:'settings'}),\n                dom('br'),\n                dom('a','New Page',{href:'newpage'}),\n            ],n=>{\n                n.style.margin='0 auto'\n                n.style.backgroundColor='white'\n                n.style.border='1px solid lightgray'\n            }\n        )\n    }\n    function logoutA(blog){\n        let a=dom('a','Logout')\n        a.href='javascript:'\n        a.onclick=async e=>{\n            e.preventDefault()\n            ;(await blog._site).logout\n        }\n        return a\n    }\n    return userA\n})()\n\n","../l/Blog/prototype.view/createHeader/createNavigationBar.js":"module.repository.event=module.shareImport('createNavigationBar/event.js')\n;(async()=>{\n    let[\n        dom,\n        event,\n        userA,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.event,\n        module.shareImport('createNavigationBar/userA.js'),\n    ])\n    function createNavigationBar(view){\n        let\n            blog=view.blog,\n            div=dom('div',{className:'navigationBar'},menuA())\n        blog._site.then(site=>{\n            perUser(site,async u=>{\n                await u.load(['isAnonymous','username','isadmin'])\n                let a=u.isAnonymous?loginA():userA(blog,div,u)\n                div.appendChild(a)\n                site.once('userChange',()=>{\n                    div.removeChild(a)\n                })\n            })\n        })\n        return div\n        function aboutA(){\n            let a=dom('a','About')\n            a.href='about'\n            return a\n        }\n        function perUser(site,func){\n            site.currentUser.then(func)\n            site.on('userChange',()=>{\n                site.currentUser.then(func)\n            })\n        }\n        function loginA(){\n            let a=dom('a','Login')\n            a.href='javascript:'\n            a.onclick=async e=>{\n                e.preventDefault()\n                e.stopPropagation()\n                ;(await blog._site).showLoginForm\n            }\n            return a\n        }\n        function menuA(){\n            let a=dom('a','Menu')\n            a.href='javascript:'\n            a.onclick=e=>{\n                e.preventDefault()\n                e.stopPropagation()\n                let n=menuDiv()\n                event.onceClickOrBlurButNotMouseDown(n,()=>\n                    div.removeChild(n)\n                )\n                div.appendChild(n)\n                n.focus()\n            }\n            return a\n        }\n        function menuDiv(){\n            let div=dom('div',innerDiv())\n            div.style.position='relative'\n            div.style.height='0'\n            div.style.width='100%'\n            div.style.outline='none'\n            div.style.top='8px'\n            div.tabIndex=0\n            return div\n            function innerDiv(){\n                let div=dom('div',aboutA())\n                div.style.margin='0 auto'\n                div.style.backgroundColor='white'\n                div.style.border='1px solid lightgray'\n                return div\n            }\n        }\n    }\n    return createNavigationBar\n})()\n","../l/Blog/prototype.view/createHeader/setupSelectedTagsDiv.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function setupSelectedTagsDiv(blog,div){\n        if(!('tagNames' in blog.status))\n            return\n        blog.status.tagNames.map((t,i)=>{\n            div.appendChild(span())\n            function span(){\n                let span=dom('span',\n                    t+' ',\n                    a()\n                )\n                span.id='span_tag_'+t\n                span.className='tag_selected'\n                span.style.marginRight='4px'\n                return span\n            }\n            function a(){\n                let anchor=dom('a','-')\n                let tagsToSelect=(blog.status.tagNames||[]).slice()\n                tagsToSelect.splice(i,1)\n                anchor.href='javascript:'\n                anchor.addEventListener('click',e=>{\n                    e.preventDefault()\n                    e.stopPropagation()\n                    blog.status=tagsToSelect.length==0?{}:{\n                        tagNames:tagsToSelect\n                    }\n                })\n                return anchor\n            }\n        })\n    }\n    return setupSelectedTagsDiv\n})()\n","../l/Blog/prototype.view/createHeader.js":"(async()=>{\n    let[\n        dom,\n        checkSetupIndex,\n        createInput,\n        setupSelectedTagsDiv,\n        createNavigationBar,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('createHeader/checkSetupIndex.js'),\n        module.shareImport('createHeader/createInput.js'),\n        module.shareImport('createHeader/setupSelectedTagsDiv.js'),\n        module.shareImport('createHeader/createNavigationBar.js'),\n    ])\n    function createHeader(blog,view){\n        let div=dom('div',\n            createTitle(),\n            createTagline(),\n            createNavigationBar(view),\n            createSearchForTags(view),\n            createTags(view),\n            createIndex()\n        )\n        div.className='header'\n        return div\n        function createTitle(){\n            let div=dom('div')\n            div.className='title'\n            ;(async()=>{\n                let site=await blog._site\n                await site.load\n                div.appendChild(\n                    createA(\n                        site.clientUrlRoot,\n                        site.bannerTitle\n                    )\n                )\n            })()\n            return div\n            function createA(clientUrlRoot,bannerTitle){\n                let a=dom('a')\n                a.href=''\n                a.onclick=e=>{\n                    if(\n                        e.which!=1||\n                        e.ctrlKey||\n                        e.shiftKey\n                    )\n                        return\n                    e.preventDefault()\n                    e.stopPropagation()\n                    blog.status={}\n                }\n                a.textContent=bannerTitle\n                return a\n            }\n        }\n        function createTagline(){\n            let div=dom('div')\n            div.className='tagline'\n            blog._site.then(s=>s.load).then(site=>{\n                div.innerHTML=site.blogTagline\n            })\n            return div\n        }\n        function createSearchForTags(view){\n            let div=dom('div',\n                createSelectedTagsDiv(),\n                view.input=createInput(blog,view),\n                view.datalist_input_searchForTag\n            )\n            div.className='searchForTags'\n            return div\n            function createSelectedTagsDiv(){\n                let div=dom('div')\n                div.className='selectedTags'\n                setupSelectedTagsDiv(blog,div)\n                blog.on('statusChange',()=>{\n                    div.innerHTML=''\n                    setupSelectedTagsDiv(blog,div)\n                })\n                return div\n            }\n        }\n        function createTags(view){\n            let div=dom('div')\n            div.className='tags'\n            blog.on('statusChange',()=>{\n                div.innerHTML=''\n                if(document.activeElement==view.input)\n                    view.setupSuggestedTags()\n            })\n            view.tagsDiv=div\n            return div\n        }\n        function createIndex(){\n            let div=dom('div')\n            div.className='index'\n            checkSetupIndex(blog,div)\n            blog.on('statusChange',()=>{\n                div.innerHTML=''\n                checkSetupIndex(blog,div)\n            })\n            return div\n        }\n    }\n    return createHeader\n})()\n","../l/Blog/prototype.view/initialize_tags_suggested.js":"function initialize_tags_suggested(div_tags){\n    div_tags.style.display='none'\n    div_tags.innerHTML=''\n}\ninitialize_tags_suggested\n","../l/Blog/prototype.view/install_datalist_tags_suggested/randomId.js":"function randomId(length){\n    let res=''\n    while(res.length<length)\n        res+=Math.random().toString(36).slice(2)\n    return 'a'+res\n}\nrandomId\n","../l/Blog/prototype.view/install_datalist_tags_suggested.js":"(async()=>{\n    let[\n        dom,\n        randomId,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('install_datalist_tags_suggested/randomId.js'),\n    ])\n    return install_datalist_tags_suggested\n    function install_datalist_tags_suggested(blogView){\n        blogView.datalist_input_searchForTag=dom('datalist')\n        // known best solution\n        blogView.datalist_input_searchForTag.id=randomId(16)\n    }\n})()\n","../l/Blog/prototype.view/prototype.keydown.js":"module.shareImport('../path.js').then(path=>{\n    return keydown\n    function keydown(e){\n        let\n            blog=this.blog,\n            view=this\n        if(0<=[\n            'INPUT',\n            'TEXTAREA',\n        ].indexOf(\n            document.activeElement.tagName\n        ))\n            return\n        if(!e.ctrlKey&&!e.shiftKey){\n            if(handle())\n                pdAndSp()\n        }else if(!e.ctrlKey&&e.shiftKey){\n            if(handleShift())\n                pdAndSp()\n        }\n        function pdAndSp(){\n            e.preventDefault()\n            e.stopPropagation()\n        }\n        function handle(){\n            // e h l o t\n            if(e.keyCode==69){ // e\n                let x=currentPage()\n                if(!x)\n                    return\n                ;(async()=>{\n                    let u=await blog._currentUser\n                    if(u.isadmin)\n                        blog.emit('location',blog.pages[x.id].getHref()+'/edit')\n                })()\n            }else if(e.keyCode==72){ // h\n                blog.status={}\n            }else if(e.keyCode==76){ // l\n                Promise.all([\n                    blog._currentUser,\n                    blog._site,\n                ]).then(vals=>{\n                    let\n                        user=vals[0],\n                        site=vals[1]\n                    if(user.isAnonymous)\n                        site.showLoginForm\n                    else\n                        site.logout\n                })\n            }else if(e.keyCode==79){ // o\n                let x=currentPage()\n                if(!x)\n                    return\n                blog.status={\n                    pageId:x.id\n                }\n            }else if(e.keyCode==84){ // t\n                view.input.focus()\n            }else{\n                return false\n            }\n            return true\n        }\n        function handleShift(){\n            // E H O\n            if(e.keyCode==69){ // E\n                let x=currentPage()\n                if(!x)\n                    return\n                open(\n                    blog.pages[x.id].getHref()+'/edit',\n                    '_blank'\n                ).focus()\n            }else if(e.keyCode==72){ // H\n                ;(async()=>{\n                    let user=await blog._currentUser\n                    await user.load('username')\n                    blog.emit('location','home/'+user.username)\n                })()\n            }else if(e.keyCode==79){ // O\n                let x=currentPage()\n                if(!x)\n                    return\n                open(path.getHrefByPage(blog.pages[x.id]),'_blank').focus()\n            }else\n                return false\n            return true\n        }\n        function currentPage(){\n            let x=blog.pages[blog.status.pageId]\n            Object.keys(blog.pages).map(i=>{\n                let e=blog.pages[i]\n                if(!e.div)\n                    return\n                if(\n                    e.div.getBoundingClientRect().top<1&&(\n                        !x||\n                        x.div.getBoundingClientRect().top<\n                        e.div.getBoundingClientRect().top\n                    )\n                )\n                    x=e\n            })\n            return x\n        }\n    }\n})\n","../l/Blog/prototype.view/use_list_tags__count_suggested.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function use_list_tags__count_suggested(blogView,list,div){\n        list.sort((a,b)=>\n            a.name.localeCompare(b.name)\n        )\n        blogView.datalist_input_searchForTag.innerHTML=''\n        list.map(e=>{\n            let o=dom('option')\n            o.value=e.name\n            blogView.datalist_input_searchForTag.appendChild(o)\n        })\n        let tagsToSelect=(blogView.blog.status.tagNames||[]).slice()\n        list.map((t,i)=>{\n            if(i%12==0)\n                div.appendChild(ul())\n            if((blogView.blog.status.tagNames||[]).indexOf(t.name)!==-1)\n                return\n            div.lastChild.appendChild(li(t))\n        })\n        div.appendChild(div_clearboth())\n        function ul(){\n            let ul=dom('ul')\n            ul.style.float='left'\n            return ul\n        }\n        function li(t){\n            return dom('li',a(t))\n        }\n        function a(t){\n            tagsToSelect.push(t.name)\n            let a=blogView.blog._anchor_addTag(t)\n            tagsToSelect.pop()\n            a.innerHTML+=\n                '&nbsp;<span style=color:purple>('+\n                t.count+')</span>'\n            return a\n        }\n        function div_clearboth(){\n            let div=dom('div')\n            div.style.clear='both'\n            return div\n        }\n    }\n    return use_list_tags__count_suggested\n})()\n","../l/Blog/prototype.view.js":"(async()=>{\n    let BlogView=await module.shareImport('prototype.view/BlogView.js')\n    return{get(){\n        let view=new BlogView(this)\n        return view\n    }}\n})()\n","../l/Blog.js":"let loadPagemodules=module.shareImport('Blog/loadPagemodules.js')\n;(async modules=>{\n    let[\n        EventEmmiter,\n        Page,\n        _getNext,\n        _anchor_addTag,\n        view,\n        path,\n    ]=await Promise.all([\n        module.repository.althea.EventEmmiter,\n        module.shareImport('Blog/Page.js'),\n        module.shareImport('Blog/prototype._getNext.js'),\n        module.shareImport('Blog/prototype._anchor_addTag.js'),\n        module.shareImport('Blog/prototype.view.js'),\n        module.shareImport('Blog/path.js'),\n    ])\n    function Blog(site,status){\n        EventEmmiter.call(this)\n        this._site=site\n        this._status=status\n        this.pages={}\n        this.pagemodules=[]\n        this.pages_loaded=[]\n        // refresh on userChange\n        this._site.then(site=>{\n            site.on('userChange',()=>{\n                this.status=this.status\n            })\n        })\n        // start add event listeners\n        this.on('newListener',(event,listener)=>\n            this.emit(event+'ListenerAdd',listener)\n        )\n        this.on('pageLoadListenerAdd',listener=>{\n            for(let i in this.pages)\n                listener(this.pages[i])\n        })\n        this.on('pageContentLoad',Page.star_all)\n        this.on('pageContentLoad',Page.tableofcontents_all)\n        // end add event listeners\n        this.load=this._site.then(site=>\n            site.loadPlugins('blog',s=>eval(s))\n        )\n        this._getNext()\n        this._styles=[]\n    }\n    Object.setPrototypeOf(Blog.prototype,EventEmmiter.prototype)\n    Blog.prototype._anchor_addTag=_anchor_addTag\n    Object.defineProperty(Blog.prototype,'_currentUser',{async get(){\n        return(await this._site).currentUser\n    }})\n    Blog.prototype._getNext=_getNext\n    Object.defineProperty(Blog.prototype,'_loadPagemodules',{async get(){\n        return this._loadPagemodules_||(this._loadPagemodules_=\n            (await loadPagemodules)(this)\n        )\n    }})\n    Blog.prototype._style=function(n){\n        this._styles.push(n)\n        this.emit('_style')\n    }\n    Object.defineProperty(Blog.prototype,'status',{get(){\n        return this._status\n    },set(val){\n        this._status=val\n        this.pages={}\n        this.pages_loaded=[]\n        this.emit('statusChange')\n        this._getNext()\n    }})\n    Object.defineProperty(Blog.prototype,'view',view)\n    Blog.prototype.path=path\n    return Blog\n})()\n","../l/Comment.js":"module.repository.althea.AltheaObject.then(AltheaObject=>{\n    function Comment(){\n        AltheaObject.apply(this,arguments)\n    }\n    Object.setPrototypeOf(Comment.prototype,AltheaObject.prototype)\n    Comment.prototype._loader='getComment'\n    return Comment\n})\n","../l/Editpage/SetForm.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function SetForm(span_tags,input){\n        this.tags=[]\n        this.tagIdInTagsByName={}\n        this.span_tags=span_tags\n        this.input=input\n    }\n    SetForm.prototype.toArray=function(){\n        let res=[]\n        this.tags.map(t=>res.push(t.name))\n        return res\n    }\n    SetForm.prototype.addTag=function(name){\n        let\n            setForm=this,\n            tag=new Tag(name)\n        setForm.tags.push(tag)\n        setForm.tagIdInTagsByName[name]=setForm.tags.length-1\n        setForm.span_tags.appendChild(tag.body)\n        function Tag(name){\n            let\n                span_name=dom('span'),\n                span=dom('span',\n                    span_name,\n                    ' ',\n                    a()\n                )\n            span_name.innerHTML=name\n            span.className='tag'\n            this.body=span\n            this.name=name\n            function a(){\n                let a=dom('a')\n                a.onclick=()=>{\n                    let id=setForm.tagIdInTagsByName[name]\n                    setForm.tags[id]=setForm.tags[setForm.tags.length-1]\n                    setForm.tagIdInTagsByName[setForm.tags[id].name]=id\n                    delete setForm.tagIdInTagsByName[name]\n                    setForm.tags.pop()\n                    span.parentNode.removeChild(span)\n                }\n                a.href='javascript:'\n                a.style.verticalAlign='middle'\n                a.style.display='inline-block'\n                a.innerHTML=\n                    '<i class=material-icons style=font-size:16pt>remove</i>'\n                return a\n            }\n        }\n    }\n    SetForm.prototype.onkeypress=function(e){\n        let name=this.input.value\n        if(\n            e.key!='Enter'||\n            this.input.value==''||\n            this.tagIdInTagsByName[name]!==undefined\n        )\n            return\n        e.stopPropagation()\n        this.input.value=''\n        this.addTag(name)\n    }\n    return SetForm\n})()\n","../l/Editpage/docCookies.js":"let docCookies={\n    // copied from MDN, edited by anliting\n    getItem:sKey=>{\n        if(!sKey)\n            return null\n        return decodeURIComponent(document.cookie.replace(\n            new RegExp(\n                \"(?:(?:^|.*;)\\\\s*\"+\n                encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g,\"\\\\$&\")+\n                \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"\n            ),\"$1\"\n        ))||null\n    },\n    setItem:(sKey,sValue,vEnd,sPath,sDomain,bSecure)=>{\n        if(!sKey||/^(?:expires|max\\-age|path|domain|secure)$/i.test(sKey))\n            return false\n        let sExpires=''\n        if(vEnd)switch(vEnd.constructor){\n            case Number:\n                sExpires = vEnd === Infinity ?\n                    \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\"\n                :\n                    \"; max-age=\" + vEnd\n                break\n            case String:\n                sExpires = \"; expires=\" + vEnd\n                break\n            case Date:\n                sExpires = \"; expires=\" + vEnd.toUTCString();\n                break;\n        }\n        document.cookie=\n            encodeURIComponent(sKey)+\n            \"=\"+\n            encodeURIComponent(sValue)+\n            sExpires+(\n                sDomain?\n                    \"; domain=\" + sDomain\n                : \"\"\n            )+(sPath ? \"; path=\" + sPath : \"\")+(\n                bSecure ? \"; secure\" : \"\"\n            )\n        return true\n    },\n    removeItem:function(sKey, sPath, sDomain){\n        if(!this.hasItem(sKey))\n            return false\n        document.cookie=\n            encodeURIComponent(sKey)+\n            \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\"+\n            (sDomain ? \"; domain=\" + sDomain : \"\")+\n            (sPath ? \"; path=\" + sPath : \"\")\n        return true\n    },\n    hasItem:sKey=>{\n        if(!sKey)\n            return false\n        return(\n            new RegExp(\"(?:^|;\\\\s*)\"+\n            encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\")+\n            \"\\\\s*\\\\=\")\n        ).test(document.cookie)\n    },\n    keys:()=>{\n        let aKeys=document.cookie.replace(\n            /((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g,\"\"\n        ).split(/\\s*(?:\\=[^;]*)?;\\s*/)\n        for(let nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++)\n            aKeys[nIdx] = decodeURIComponent(aKeys[nIdx])\n        return aKeys;\n    }\n}\ndocCookies\n","../l/Editpage/editpage.css":"html{\n    height:100%;\n}\nbody{\n    margin:0px;\n    min-height:360px;\n    height:100%;\n}\n#div_main{\n    margin:0px auto;\n    max-width:600px;\n    width:100%;\n    height:100%;\n}\n#table_content{\n    width:100%;\n    height:100%;\n}\n#table_content td{\n    padding:2px;\n}\n#button_save{\n    padding:4px;\n}\n#button_submit{\n    padding:4px;\n}\n#input_newtag{\n    margin:4px;\n    padding:4px;\n}\n#input_newname{\n    margin:4px;\n    padding:4px;\n}\n#input_title{\n    box-sizing:border-box;\n    width:100%;\n    padding:4px;\n}\n#td_content{\n    height:100%;\n}\n#div_textarea_content{\n    height:100%;\n}\n#textarea_content{\n    box-sizing:border-box;\n    width:100%;\n    height:100%;\n    padding:4px;\n}\n#div_htmleditor{\n    margin:0px;\n    border:1px solid lightgray;\n    padding:8px;\n    height:100%;\n    overflow-y:auto;\n    line-height:100%;\n}\n#div_preview{\n    margin:0px;\n    border:1px solid lightgray;\n    padding:8px;\n    height:100%;\n    overflow-y:auto;\n    line-height:100%;\n}\nspan.tag{\n    border:solid 1px lightgray;\n    padding:4px;\n    margin-right:4px;\n    margin-bottom:4px;\n    font-family:sans-serif;\n}\nspan.tag a{\n    text-decoration:none;\n}\nspan.name{\n    border:solid 1px lightgray;\n    padding:4px;\n    margin-right:4px;\n    margin-bottom:4px;\n    font-family:sans-serif;\n}\nspan.name a{\n    text-decoration:none;\n}\n/* 2015-09-20 */\n#span_graphvisualizer{\n    display:none;\n}\n.nonMobile #span_graphvisualizer{\n    display:unset;\n}\n/* 2015-09-20 Make some select larger. */\n#select_id_pagemodule{\n    padding:4px;\n}\n#select_privacy{\n    padding:4px;\n}\n/* 2015-09-02 Make something float. */\nspan.tag{\n    float:left;\n}\nspan.name{\n    float:left;\n}\n","../l/Editpage/initialize.js":"async function getData(editpage){\n    let res={}\n    if(editpage.id){\n        let\n            site=await editpage._site,\n            page=await site.getPage(editpage.id),\n            pageversion=await page.lastversion\n        await Promise.all([\n            page.load([\n                'public',\n                'lastversionId',\n                'preferredPagename',\n                'timestamp_insert',\n                'timestamp_lastmodified',\n                'author',\n                'pagenames',\n            ]),\n            pageversion.load([\n                'content',\n                'id_page',\n                'id_pagemodule',\n                'id_user_author',\n                'public',\n                'isremoved',\n                'tags',\n                'timestamp_insert',\n                'title',\n            ]),\n        ])\n        res.page={\n            id:page.id,\n            id_user_author:page.author,\n            ispublic:page.public,\n            id_lastversion:page.lastversionId,\n            isremoved:false,\n            preferredPagename:page.preferredPagename,\n            timestamp_insert:page.timestamp_insert,\n            timestamp_lastmodified:page.timestamp_lastmodified,\n            pagenames:page.pagenames,\n        }\n        res.lastversion_page={\n            content:pageversion.content,\n            id:pageversion.id,\n            id_page:pageversion.id_page,\n            id_pagemodule:pageversion.id_pagemodule,\n            id_user_author:pageversion.id_user_author,\n            ispublic:pageversion.public,\n            isremoved:pageversion.isremoved,\n            tags:pageversion.tags,\n            timestamp_insert:pageversion.timestamp_insert,\n            title:pageversion.title,\n        }\n    }\n    return res\n}\n;(async()=>{\n    let[\n        setup,\n        update,\n        browser,\n    ]=await Promise.all([\n        module.shareImport('setup.js'),\n        module.shareImport('update.js'),\n        module.repository.althea.browser,\n    ])\n    async function initialize(editpage){\n        editpage.isMobile=browser.isMobile\n        editpage.id=environment.id_page||0\n        document.title=!editpage.id?'New Page':'Edit Page'\n        setup(editpage,editpage.isMobile)\n        let res=await Promise.all([\n            getData(editpage),\n            editpage._site.then(site=>\n                site.send('getTags')\n            ),\n            editpage._site.then(async site=>{\n                let res=await site.send('getPagemodules0')\n                return Promise.all(res.map(async id=>{\n                    let pagemodule=await site.getPagemodule(id)\n                    return pagemodule.load([\n                        'priority',\n                        'name',\n                    ])\n                }))\n            }),\n        ])\n        let data=res[0]\n        data.tags=res[1]\n        data.pagemodules=res[2]\n        update(editpage,data)\n    }\n    return initialize\n})()\n","../l/Editpage/prototype.editors.js":"(async()=>{\n    let BlogPage=await module.shareImport('../Blog/Page.js')\n    return[\n        {\n            come:function(){\n                document.getElementById(\n                    'div_textarea_content'\n                ).style.display=\n                    'block'\n            },\n            leave:function(){\n                document.getElementById(\n                    'div_textarea_content'\n                ).style.display=\n                    'none'\n            },\n        },{\n            come:function(){\n                document.getElementById('div_htmleditor').innerHTML=\n                    this.textarea_content.value\n                this.htmleditor=new HTMLEditor(\n                    document.getElementById('div_htmleditor')\n                )\n                document.getElementById('div_htmleditor').style.display=\n                    'block'\n            },leave:function(){\n                this.textarea_content.value=\n                    this.htmleditor.html()\n                document.getElementById('div_htmleditor').style.display=\n                    'none'\n            },\n        },{\n            come:function(){\n                let div_preview=document.getElementById('div_preview')\n                div_preview.innerHTML=\n                    this.pagemodules[1].compile(\n                        this.textarea_content.value\n                    )\n                syntaxHighlighter.highlight_all(div_preview,()=>{\n                    syntaxHighlighter.border_all(div_preview)\n                })\n                BlogPage.star_all(div_preview)\n                BlogPage.tableofcontents_all(div_preview)\n                graphvisualize_all(div_preview)\n                MathJax.Hub.Queue(['Typeset',MathJax.Hub])\n                document.getElementById('div_preview').style.display=\n                    'block'\n            },leave:function(){\n                document.getElementById('div_preview').style.display=\n                    'none'\n            },\n        },\n    ]\n})()\n","../l/Editpage/prototype.setup_form.js":"(function(){\n    let\n        editpage=this,\n        showHtmlA=document.getElementById('showHtmlA'),\n        htmlEditorA=document.getElementById('htmlEditorA'),\n        previewA=document.getElementById('previewA'),\n        button_save=document.getElementById('button_save'),\n        button_submit=document.getElementById('button_submit'),\n        input_newtag=document.getElementById('input_newtag'),\n        input_newname=document.getElementById('input_newname')\n    addEventListener('keydown',e=>{\n        if(!(\n            e.ctrlKey&&e.shiftKey&&e.keyCode==83\n        ))\n            return\n        editpage.submit().then(page=>{\n            onbeforeunload=null\n            location=page.id\n        })\n    })\n    showHtmlA.addEventListener('click',e=>{\n        e.preventDefault()\n        editpage.show_html()\n    })\n    htmlEditorA.addEventListener('click',e=>{\n        e.preventDefault()\n        editpage.show_htmleditor()\n    })\n    previewA.addEventListener('click',e=>{\n        e.preventDefault()\n        editpage.show_preview()\n    })\n    button_save.addEventListener('click',()=>{\n        editpage.submit().then(page=>{\n            // to-do: let user know\n        })\n    })\n    button_submit.addEventListener('click',()=>{\n        editpage.submit().then(page=>{\n            onbeforeunload=null\n            location=page.id\n        })\n    })\n    input_newtag.addEventListener('keypress',e=>{\n        editpage.setOfTags.onkeypress(e)\n    })\n    input_newname.addEventListener('keypress',e=>{\n        editpage.setOfNames.onkeypress(e)\n    })\n})\n","../l/Editpage/prototype.submit.js":"function submit(){\n    this.changeEditor(0)\n    return module.repository.althea.site.then(site=>\n        site.send({\n            function:'editpage',\n            id_page:this.id,\n            id_pagemodule:\n                +document.getElementById('select_id_pagemodule').value,\n            ispublic:document.getElementById('select_privacy').value==2,\n            tags:this.setOfTags.toArray(),\n            pagenames:this.setOfNames.toArray(),\n            title:document.getElementById('input_title').value,\n            content:this.textarea_content.value,\n        })\n    ).then(id=>({\n        id,\n    }))\n}\nsubmit\n","../l/Editpage/setup.js":"function setup(editpage,isMobile){\n    let div_main=document.getElementById('div_main')\n    editpage.textarea_content=\n        document.getElementById('textarea_content')\n    onbeforeunload=()=>{\n        return''\n    }\n    div_main.classList.add(!isMobile?'nonMobile':'mobile')\n    editpage.setup_form()\n    editpage.emit('setUp')\n    editpage.setUp=true\n    return\n}\nsetup\n","../l/Editpage/update.js":"(async()=>{\n    let[\n        dom,\n        Pagemodule,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.blog.Pagemodule,\n    ])\n    function update(editpage,data){\n        data.pagemodules.map(async e=>{\n            let definitions=await e.definitions\n            editpage.pagemodules.push(new Pagemodule(\n                e.id,\n                e.priority,\n                e.name,\n                definitions\n            ))\n        })\n        /*document.getElementById(\n            'input_ispublic_'+(\n                editpage.id&&data.lastversion_page.ispublic?\n                    'true'\n                :\n                    'false'\n            )\n        ).checked='checked'*/\n        document.getElementById('select_privacy').value=\n            editpage.id&&data.lastversion_page.ispublic?2:1\n        data.pagemodules.sort((a,b)=>\n            a.priority-b.priority\n        )\n        data.pagemodules.map(e=>{\n            let option=dom('option',e.name)\n            option.value=e.id\n            if(editpage.id&&e.id==data.lastversion_page.id_pagemodule)\n                option.selected='selected'\n            document.getElementById('select_id_pagemodule').appendChild(\n                option\n            )\n        })\n        editpage.id&&data.lastversion_page.tags.map(e=>{\n            editpage.setOfTags.addTag(e)\n        })\n        editpage.id&&data.page.pagenames.map(e=>{\n            editpage.setOfNames.addTag(e)\n        })\n        data.tags.map(e=>{\n            let option=dom('option')\n            option.value=e\n            document.getElementById('tags').appendChild(\n                option\n            )\n        })\n        if(editpage.id){\n            document.getElementById('input_title').value=\n                data.lastversion_page.title\n            textarea_content.value=\n                data.lastversion_page.content\n        }\n        document.getElementById('input_newtag').disabled=false\n        document.getElementById('input_newname').disabled=false\n        document.getElementById('input_title').disabled=false\n        textarea_content.disabled=false\n        if(editpage.id){\n            textarea_content.selectionStart=\n            textarea_content.selectionEnd=0\n            textarea_content.focus()\n        }\n    }\n    return update\n})()\n","../l/Editpage.js":"let modules=Promise.all([\n    module.shareImport('Editpage/prototype.editors.js'),\n    module.shareImport('Editpage/prototype.setup_form.js'),\n    module.shareImport('Editpage/prototype.submit.js'),\n    module.style('Editpage/editpage.css'),\n])\n;(async()=>{\n    let[\n        EventEmmiter,\n        ImageUploader,\n        dom,\n        SetForm,\n        initialize,\n    ]=await Promise.all([\n        module.repository.althea.EventEmmiter,\n        module.repository.althea.ImageUploader,\n        module.repository.althea.dom,\n        module.shareImport('Editpage/SetForm.js'),\n        module.shareImport('Editpage/initialize.js'),\n    ])\n    modules=await modules\n    let\n        div_main,\n        isMobile\n    function Editpage(site){\n        EventEmmiter.call(this)\n        this._site=site\n        this.pagemodules=[]\n        this.setOfTags=new SetForm(\n            document.getElementById('span_tags'),\n            document.getElementById('input_newtag')\n        )\n        this.setOfNames=new SetForm(\n            document.getElementById('span_names'),\n            document.getElementById('input_newname')\n        )\n        this.currentEditor=0\n        this.load=this._site.then(site=>\n            site.loadPlugins('editpage',s=>eval(s))\n        )\n        // start set up image uploader\n        let imageUploader=new ImageUploader(this._site)\n        let fileButton=dom.createFileButton('Image')\n        fileButton.on('file',async a=>{\n            fileButton.n.disabled=true\n            let imageIds=await imageUploader.uploadImages(a)\n            imageIds.map(id=>\n                this.textarea_content.value+=\n                    `<a href=img/${id}.jpg><img src=img/${\n                        id\n                    }c800x600.jpg style=width:100%></a>\\n`\n            )\n            fileButton.n.disabled=false\n        })\n        document.getElementById('table_content').appendChild(\n            createUploadImageTr(imageUploader)\n        )\n        function createUploadImageTr(imageUploader){\n            return dom('tr',createUploadImageTd(imageUploader))\n        }\n        function createUploadImageTd(imageUploader){\n            return dom('td',fileButton.n)\n        }\n        // end set up image uploader\n        initialize(this)\n    }\n    Object.setPrototypeOf(Editpage.prototype,EventEmmiter.prototype)\n    Object.defineProperty(Editpage.prototype,'currentUser',{get(){\n        return this._site.then(site=>site.currentUser)\n    }})\n    Editpage.prototype.setup_form=modules[1]\n    Editpage.prototype.submit=modules[2]\n    Editpage.prototype.show_html=function(){\n        this.changeEditor(0)\n    }\n    Editpage.prototype.show_htmleditor=function(){\n        this.changeEditor(1)\n    }\n    Editpage.prototype.show_preview=function(){\n        this.changeEditor(2)\n    }\n    Editpage.prototype.editors=modules[0]\n    Editpage.prototype.changeEditor=function(id){\n        this.editors[this.currentEditor].leave.bind(this)()\n        this.currentEditor=id\n        this.editors[this.currentEditor].come.bind(this)()\n    }\n    Editpage.style=modules[3]\n    return Editpage\n})()\n","../l/Page/BlogPage/Page.prototype.createPrivacyTable.js":"(async()=>{\n    let[\n        dom,\n        createHideShowA,\n        privacyTd,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('createHideShowA.js'),\n        module.shareImport('privacyTd.js'),\n    ])\n    return createPrivacyTable\n    function createPrivacyTable(pageView){\n        let\n            page=this,\n            table_privacy\n        table_privacy=dom('table',\n            tr_privacy(page),\n            tr_tags()\n        )\n        table_privacy.style.width='100%'\n        table_privacy.style.marginBottom='20px'\n        return table_privacy\n        function tr_privacy(page){\n            return dom('tr',\n                privacyTd(page),\n                td_functions()\n            )\n        }\n        function td_functions(){\n            let td=dom('td',\n                createHideShowA(page,pageView),\n                page.a_comment\n            )\n            td.className='td_pageButtons'\n            td.style.width='100px'\n            ;(async()=>{\n                let u=await page.blog._currentUser\n                await u.load('isadmin')\n                if(u.isadmin){\n                    td.appendChild(a_editpage())\n                    td.appendChild(a_removepage())\n                }\n            })()\n            return td\n            function a_editpage(){\n                let a=dom('a')\n                a.className='a_editpage functionbutton'\n                a.href=page.id+'/edit'\n                a.innerHTML='<i class=material-icons>mode_edit</i>'\n                return a\n            }\n            function a_removepage(){\n                let a=dom('a')\n                a.className='functionbutton a_removepage'\n                a.href='javascript:'\n                a.onclick=()=>{\n                    if(confirm('Remove?')){\n                        remove()\n                    }\n                }\n                a.innerHTML='<i class=material-icons>remove</i>'\n                return a\n                function remove(){\n                    module.repository.althea.site.then(site=>\n                        site.send({\n                            function:'removePage',\n                            page:page.id\n                        })\n                    )\n                }\n            }\n        }\n        function tr_tags(){\n            return dom('tr',td())\n        }\n        function td(){\n            let\n                td,\n                isFirst\n            td=dom('td')\n            if(page.tags.length){\n                page.tags.sort()\n                td.appendChild(\n                    document.createTextNode('Tagged: ')\n                )\n                isFirst=true\n                page.tags.map(e=>{\n                    if(isFirst)\n                        isFirst=false\n                    else\n                        td.appendChild(\n                            document.createTextNode(', ')\n                        )\n                    td.appendChild(\n                        page.blog._anchor_addTag({name:e})\n                    )\n                })\n            }\n            return td\n    /*+(p.page_derived_from.length!=0?str_pages_derived_from:'')\n    +(p.page_derived_to.length!=0?str_pages_derived_to:'')*/\n        }\n    }\n})()\n","../l/Page/BlogPage/Page.prototype.view/PageView/commentDiv.js":"(async()=>{\n    let[dom,html]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.althea.html,\n    ])\n    return(page,comment)=>{\n        let div=dom('div')\n        div.className='comments'\n        ;(async()=>{\n            comment=await comment\n            await comment.load([\n                'content',\n                'id_user_owner',\n                'timestamp_insert',\n            ])\n            let[\n                cu,\n                u,\n            ]=await Promise.all([\n                (async()=>{\n                    let u=await page.blog._currentUser\n                    await u.load('isadmin')\n                    return u\n                })(),\n                (async()=>{\n                    let site=await page.blog._site\n                    let u=await site.getUser(comment.id_user_owner)\n                    await u.load('username')\n                    return u\n                })(),\n            ])\n            div.innerHTML=\n                `<table style=width:100%><tr><td>${\n                    u.username\n                }</td><td style=text-align:right>${\n                    comment.timestamp_insert\n                }</td></tr></table><div>${\n                    html.encodeText(comment.content)\n                }</div>`\n            if(cu.isadmin)\n                div.appendChild(deleteA(comment.id))\n        })()\n        return div\n        function deleteA(id){\n            let a=dom('a','delete',{href:'javascript:'})\n            a.onclick=async e=>{\n                e.preventDefault()\n                e.stopPropagation()\n                let site=await page.blog._site\n                await site.send({\n                    function:'deleteComment',\n                    id\n                })\n                page.blog.status=page.blog.status\n            }\n            return a\n        }\n    }\n})()\n","../l/Page/BlogPage/Page.prototype.view/PageView/commentForm.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    return page=>{\n        let form=dom('form',\n            page.textarea_comment__form_comment,\n            dom('br'),\n            page.input_submit__form_comment\n        )\n        form.className='form_newcomment'\n        form.onsubmit=async e=>{\n            e.preventDefault()\n            e.stopPropagation()\n            await page.blog._site.then(site=>\n                site.send({\n                    function:'newComment',\n                    page:page.id,\n                    content:page.textarea_comment__form_comment.value,\n                })\n            )\n            page.blog.status=page.blog.status\n        }\n        return form\n    }\n})()\n","../l/Page/BlogPage/Page.prototype.view/PageView.js":";(async()=>{\n    let[\n        html,\n        dom,\n        EventEmmiter,\n        commentForm,\n        commentDiv,\n    ]=await Promise.all([\n        module.repository.althea.html,\n        module.repository.althea.dom,\n        module.repository.althea.EventEmmiter,\n        module.shareImport('PageView/commentForm.js'),\n        module.shareImport('PageView/commentDiv.js'),\n    ])\n    function PageView(page){\n        EventEmmiter.call(this)\n        this.domElement=createDiv(this,page)\n    }\n    Object.setPrototypeOf(PageView.prototype,EventEmmiter.prototype)\n    function createDiv(pageView,page){\n        let\n            div=dom('div'),\n            isfirst\n        pageView.hide=!page.ispublic&&!page.blog.status.pageId\n        div.className='post'\n        page.div=div\n        page.blog.pages_loaded.push(page.id)\n        // tags\n        let contentDiv=div_blog_content(pageView,page)\n        pageView.on('clickHideshow',()=>{\n            pageView.hide=!pageView.hide\n            $&&$(contentDiv).toggle(320)\n        })\n        div.appendChild(page.h1_title())\n        div.appendChild(page.div_author=    page.createAuthorDiv())\n        div.appendChild(page.div_date=      page.createDateDiv())\n        div.appendChild(\n            page.table_privacy=page.createPrivacyTable(pageView)\n        )\n        div.appendChild(contentDiv)\n        div.appendChild(div_facebooklike(page))\n        page.blog.isFacebookLoaded&&FB.XFBML.parse(div)\n        ;(async()=>{\n            let site=await page.blog._site\n            let p=await site.getPage(page.id)\n            await p.load('comments')\n            let comments=p.comments\n            await Promise.all(\n                comments.map(comment=>\n                    div.appendChild(\n                        commentDiv(page,site.getComment(comment))\n                    )\n                )\n            )\n            div.appendChild(commentForm(page))\n        })()\n        return div\n    }\n    function div_blog_content(pageView,page){\n        let\n            div=dom('div',{\n                id:'blog_content_'+page.id,\n                innerHTML:page.blog.pagemodules[\n                    page.id_pagemodule-1\n                ].compile(page.content),\n            })\n        div.style.display=pageView.hide?'none':'block'\n        for(let s of div.getElementsByTagName('script'))\n            eval(s.innerHTML)\n        page.blog.emit('pageContentLoad',div)\n        page.blog.on('pageContentLoadListenerAdd',listener=>\n            listener(div)\n        )\n        return div\n    }\n    function div_facebooklike(page){\n        let div=dom('div',{className:'fb-like'})\n        div.setAttribute(\n            'data-href','https://anliting.com/'+page.id\n        )\n        div.setAttribute('data-layout','standard')\n        div.setAttribute('data-action','like')\n        div.setAttribute('data-show-faces','true')\n        div.setAttribute('data-share','true')\n        return div\n    }\n    return PageView\n})()\n/*\n    // derived from\n    let str_pages_derived_from='Derived from: '\n    isfirst=1\n    page.page_derived_from.map(q=>{\n        if(!isfirst)\n            str_pages_derived_from+=', '\n        str_pages_derived_from+='<a href='+q.id+'>'\n            +html.encodeText(q.title)\n            +'</a>'\n        isfirst=0\n    })\n    str_pages_derived_from+='<br>'\n    // end derived from\n    // derived to\n    let str_pages_derived_to='Derived to: '\n    isfirst=1\n    page.page_derived_to.map(q=>{\n        if(!isfirst)\n            str_pages_derived_to+=', '\n        str_pages_derived_to+='<a href=\"'+q.id+'\">'\n            +html.encodeText(q.title)\n            +'</a>'\n        isfirst=0\n    })\n    str_pages_derived_to+='<br>'\n    // end derived to\n*/\n","../l/Page/BlogPage/Page.prototype.view.js":";(async()=>{\n    let[\n        PageView\n    ]=await Promise.all([\n        module.shareImport('Page.prototype.view/PageView.js')\n    ])\n    return{get(){\n        return new PageView(this)\n    }}\n})()\n","../l/Page/BlogPage/createHideShowA.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    let\n        str_show='<i class=material-icons>expand_more</i>',\n        str_hide='<i class=material-icons>expand_less</i>'\n    function createHideShowA(page,pageView){\n        let a_hideshow=dom('a')\n        a_hideshow.className='a_hideshow functionbutton'\n        a_hideshow.href='javascript:'\n        a_hideshow.innerHTML=pageView.hide?str_show:str_hide\n        a_hideshow.onclick=()=>{\n            pageView.emit('clickHideshow')\n            a_hideshow.innerHTML=\n                pageView.hide?str_show:str_hide\n        }\n        return a_hideshow\n    }\n    return createHideShowA\n})()\n","../l/Page/BlogPage/privacyTd.js":";(async()=>{\n    let[\n        dom,\n        order,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.althea.order,\n    ])\n    return privacyTd\n    function privacyTd(page){\n        return dom('td',span_privacy())\n        function span_privacy(){\n            let span=dom('span')\n            span.style.fontStyle='italic'\n            let a=[\n                (async()=>{\n                    let site=await page.blog._site\n                    let u=await site.getUser(page.authorId)\n                    return span.appendChild(await u.a)\n                })(),\n                document.createTextNode(' '),\n                dateSpan(),\n            ]\n            if(!page.ispublic){\n                a.push(document.createTextNode(' '))\n                a.push(privateSpan())\n            }\n            order(\n                a,\n                span.insertBefore.bind(span),\n                span.appendChild.bind(span)\n            )\n            return span\n            function dateSpan(){\n                let span=dom('span',\n                    dateToString(new Date(page.timestamp_insert))\n                )\n                span.title=`Last modified: ${\n                    page.datetime_lastmodified\n                }`\n                return span\n            }\n            function privateSpan(){\n                return dom('span','private')\n            }\n            function dateToString(d){\n                return`${d.getFullYear()}-${1+d.getMonth()}-${\n                    d.getDate()\n                }`\n            }\n            /*` ${page.content.length}Bytes.`*/\n        }\n    }\n})()\n","../l/Page/BlogPage/setup.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function setup(){\n        let\n            page=this,\n            a_comment,\n            textarea_comment__form_comment\n        a_comment=dom('a')\n        a_comment.className='a_comment functionbutton'\n        a_comment.href='javascript:'\n        a_comment.innerHTML='<i class=material-icons>comment</i>'\n        a_comment.onclick=()=>{\n            $&&$('html,body').animate({\n                scrollTop:\n                    $(textarea_comment__form_comment).offset().top+\n                        80-$(window).height()\n            },320)\n            textarea_comment__form_comment.focus()\n        }\n        textarea_comment__form_comment=dom('textarea')\n        textarea_comment__form_comment.className='textarea_comment'\n        textarea_comment__form_comment.name='content'\n        textarea_comment__form_comment.placeholder='Comment ...'\n        textarea_comment__form_comment.addEventListener('focus',()=>{\n            page.input_submit__form_comment.style.display='inline'\n        })\n        this.a_comment=a_comment\n        this.textarea_comment__form_comment=textarea_comment__form_comment\n        this.input_submit__form_comment=input_submit__form_comment()\n        function input_submit__form_comment(){\n            let input_submit__form_comment=dom('input')\n            input_submit__form_comment.className='input_comment_submit'\n            input_submit__form_comment.type='submit'\n            input_submit__form_comment.value='Submit'\n            input_submit__form_comment.style.display='none'\n            return input_submit__form_comment\n        }\n    }\n    return setup\n})()\n","../l/Page/BlogPage.js":";(async()=>{\n    let[\n        EventEmmiter,\n        dom,\n        setup,\n        view,\n        createPrivacyTable,\n    ]=await Promise.all([\n        module.repository.althea.EventEmmiter,\n        module.repository.althea.dom,\n        module.shareImport('BlogPage/setup.js'),\n        module.shareImport('BlogPage/Page.prototype.view.js'),\n        module.shareImport('BlogPage/Page.prototype.createPrivacyTable.js'),\n    ])\n    function BlogPage(blog,id,ispublic,title,id_pagemodule){\n        EventEmmiter.call(this)\n        this.blog=blog\n        this.id=id\n        this.ispublic=ispublic\n        this.title=title\n        this.id_pagemodule=id_pagemodule\n        setup.call(this)\n    }\n    Object.setPrototypeOf(BlogPage.prototype,EventEmmiter.prototype)\n    Object.defineProperty(BlogPage.prototype,'view',view)\n    BlogPage.prototype.createPrivacyTable=createPrivacyTable\n    BlogPage.prototype.getHref=function(){\n        return this.preferredPagename?\n            this.preferredPagename\n        :\n            this.id\n    }\n    BlogPage.prototype.h1_title=function(){\n        let page=this\n        let h1_title=dom('h1',a_h1_title())\n        h1_title.style.textAlign='center'\n        return h1_title\n        function a_h1_title(){\n            let a=dom('a',page.title)\n            a.className='title'\n            a.href=page.getHref()\n            a.onclick=e=>{\n                if(\n                    e.which!==1||\n                    e.ctrlKey||\n                    e.shiftKey\n                )\n                    return\n                e.preventDefault()\n                page.blog.status={pageId:page.id}\n            }\n            return a\n        }\n    }\n    BlogPage.prototype.createAuthorDiv=function(){\n        let div=dom('div')\n        div.style.textAlign='center'\n        div.style.display='none'\n        div.style.fontSize='1.5em'\n        ;(async()=>{\n            let site=await this.blog._site\n            let u=await site.getUser(this.authorId)\n            await u.load('nickname')\n            dom(div,u.nickname)\n        })()\n        return div\n    }\n    BlogPage.prototype.createDateDiv=function(){\n        let\n            div=dom('div'),\n            date=new Date(this.datetime_lastmodified)\n        div.style.textAlign='center'\n        div.style.display='none'\n        div.style.fontSize='1.5em'\n        div.style.marginTop='0.67em'\n        div.style.marginBottom='2em'\n        div.textContent=\n            `${1900+date.getYear()}-${1+date.getMonth()}-${date.getDate()}`\n        return div\n    }\n    return BlogPage\n})()\n","../l/Page.js":"(async()=>{\n    let[\n        AltheaObject,\n        dom,\n        BlogPage,\n    ]=await Promise.all([\n        module.repository.althea.AltheaObject,\n        module.repository.althea.dom,\n        module.shareImport('Page/BlogPage.js'),\n    ])\n    function Page(){\n        AltheaObject.apply(this,arguments)\n    }\n    Object.setPrototypeOf(Page.prototype,AltheaObject.prototype)\n    Page.prototype._loader='getPage'\n    Object.defineProperty(Page.prototype,'a',{get(){\n        let a=dom('a')\n        a.href=this.id\n        this.lastversion.then(async pv=>{\n            await pv.load('title')\n            a.textContent=pv.title||'Untitled'\n        })\n        return a\n    }})\n    Object.defineProperty(Page.prototype,'lastversion',{async get(){\n        await this.load('lastversionId')\n        return this._site.getPageversion(this.lastversionId)\n    }})\n    Page.BlogPage=BlogPage\n    return Page\n})()\n","../l/Pagemodule.js":"module.repository.althea.html.then(html=>{\n    function Pagemodule(id,priority,name,definitions){\n        this.id=id\n        this.priority=priority\n        this.name=name\n        this.definitions=definitions\n    }\n    Pagemodule.prototype.compile=function(s){\n        this.definitions.map(d=>{\n            // data bug patch\n            s=s||''\n            s=s.split(d.name).join(d.content)\n        })\n        s=s.replace(/\\[nothing\\][\\s\\S]*?\\[\\/nothing\\]/g,s=>{\n            return ''\n        }).replace(\n            /\\[ignorePluralSpaceCharacters\\][\\s\\S]*?\\[\\/ignorePluralSpaceCharacters\\]/g,\n            s=>{\n                return s.substring(\n                    '[ignorePluralSpaceCharacters]'.length,\n                    s.length-'[/ignorePluralSpaceCharacters]'.length\n                ).replace(/ {2,}/g,'')\n            }\n        ).replace(\n            /\\[ignoreNewlineCharacters\\][\\s\\S]*?\\[\\/ignoreNewlineCharacters\\]/g,\n            s=>{\n                return s.substring(\n                    '[ignoreNewlineCharacters]'.length,\n                    s.length-'[/ignoreNewlineCharacters]'.length\n                ).replace(/\\n/g,'')\n            }\n        ).replace(/\\[htmlentities\\][\\s\\S]*?\\[\\/htmlentities\\]/g,s=>{\n            return html.encodeText(s.substring(14,s.length-15))\n        }).replace(/\\[sp2nbsp\\][\\s\\S]*?\\[\\/sp2nbsp\\]/g,s=>{\n            return sp2nbsp(s.substring(9,s.length-10))\n        }).replace(/\\[nl2br\\][\\s\\S]*?\\[\\/nl2br\\]/g,s=>{\n            return nl2br(s.substring(7,s.length-8))\n        })\n        return s\n        function sp2nbsp(s){\n            return s.split(' ').join('&nbsp;')\n        }\n        function nl2br(s){\n            return s.split('\\r\\n').join('<br>')\n        }\n    }\n    return Pagemodule\n})\n","../l/Pagemodule0.js":"module.repository.althea.AltheaObject.then(AltheaObject=>{\n    function Pagemodule0(){\n        AltheaObject.apply(this,arguments)\n    }\n    Object.setPrototypeOf(Pagemodule0.prototype,AltheaObject.prototype)\n    Pagemodule0.prototype._loader='getPagemoduleInfo'\n    Object.defineProperty(Pagemodule0.prototype,'definitions',{get(){\n        return this._site.send({\n            function:'getDefinitionByPagemodule',\n            id:this.id,\n        })\n    }})\n    return Pagemodule0\n})\n","../l/Pageversion.js":"(async()=>{\n    let AltheaObject=await module.repository.althea.AltheaObject\n    function Pageversion(){\n        AltheaObject.apply(this,arguments)\n    }\n    Object.setPrototypeOf(Pageversion.prototype,AltheaObject.prototype)\n    Pageversion.prototype._loader='getPageversion'\n    return Pageversion\n})()\n","../l/Site.js":"(async()=>{\n    let RawSite=await module.repository.althea.Site\n    function Site(){\n        RawSite.call(this)\n        this._pagemodules={}\n        this._pageversions={}\n    }\n    Object.setPrototypeOf(Site.prototype,RawSite.prototype)\n    Site.prototype.getComment=async function(id){\n        return new(await module.repository.blog.Comment)(this,id)\n    }\n    Site.prototype.getPage=async function(id){\n        // cache is disabled because of the comment feature\n        return new(await module.repository.blog.Page)(this,id)\n    }\n    Site.prototype.getPagemodule=async function(id){\n        return this._pagemodules[id]||(this._pagemodules[id]=\n            new(await module.repository.blog.Pagemodule0)(this,id)\n        )\n    }\n    Site.prototype.getPageversion=async function(id){\n        return this._pageversions[id]||(this._pageversions[id]=\n            new(await module.repository.blog.Pageversion)(this,id)\n        )\n    }\n    return Site\n})()\n","../l/repository.js":"(async()=>{\n    let lazyMap=await module.repository.althea.lazyMap\n    return m=>{\n        m.repository.blog=lazyMap({\n            Blog:           'Blog.js',\n            Comment:        'Comment.js',\n            Page:           'Page.js',\n            Pagemodule:     'Pagemodule.js',\n            Pagemodule0:    'Pagemodule0.js',\n            Pageversion:    'Pageversion.js',\n            site:           'site.js',\n            Site:           'Site.js',\n        },s=>module.shareImport(s))\n    }\n})()\n","../l/site.js":"(async()=>\n    new(await module.repository.blog.Site)\n)()\n"}).map(([k,v])=>module.static(k,v));let editpageReady=Promise.all([
    module.scriptByPath('https://gitcdn.link/cdn/anliting/syntaxhighlighter/e84919de45c19a185a4caa411037e28d5695d16b/highlighter.js'),
    module.scriptByPath('https://gitcdn.link/cdn/anliting/graphvisualizer/9f7c4b53cf2d24e1362dc609b63816238ac2fa88/visualizer.js'),
    module.scriptByPath('https://gitcdn.link/cdn/anliting/htmleditor/9f904627c0ab99c4527ceb3c54a61c5704e6ddec/htmleditor.js'),
    module.scriptByPath('https://gitcdn.link/cdn/mathjax/MathJax/d4ab1b35c96dd964eaa9e1ed2c86e39fffbdacf6/MathJax.js?config=TeX-AMS-MML_HTMLorMML'),
    module.scriptByPath('https://gitcdn.link/cdn/sytelus/CryptoJS/7fbfbbee0d005b31746bc5858c70c359e98308e5/rollups/aes.js'),
])
;(async()=>{
    ;(await module.importByPath('lib/general.static.js',{mode:1}))(module)
    ;(await module.shareImport('../l/repository.js'))(module)
    let site=module.repository.blog.site
    environment=module.arguments.editpageEnv
    site.then(site=>
        site.on('userChange',()=>
            location='/'
        )
    )
    module.shareImport('../l/Editpage.js').then(async Editpage=>{
        document.head.appendChild(Editpage.style)
        await editpageReady
        new Editpage(site)
    })
    /*module.repository.althea.Navigationbar.then(Navigationbar=>{
        let navigationbar=new Navigationbar(site)
        document.body.appendChild(navigationbar.view)
    })*/
})()
