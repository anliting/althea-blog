Object.entries({"Blog/Page.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function html_stars(rating){\n        let output=''\n        for(let i=0;i<5;i++){\n            output+=\"<img src=images/\"+(\n                2*i+2<=rating?\n                    'star-full'\n                :2*i+1<=rating?\n                    'star-half'\n                :\n                    'star-empty'\n            )+\".png style=width:18px>\"\n        }\n        return output\n    }\n    function tableofcontents(e){\n        let\n            id_page=e.parentNode.id.substr(13,e.parentNode.id.length),\n            s=[0],\n            v,\n            a\n        v=e\n        a=e.parentNode.getElementsByClassName('tablethis')\n        for(let i=0;i<a.length;i++){\n            let p=a[i]\n            p.id='h'+id_page+'_'+i\n            let r=+p.tagName[1]\n            while(s[s.length-1]>r){\n                s.pop()\n                v=v.parentNode.parentNode\n            }\n            if(s[s.length-1]==r)\n                v=v.parentNode\n            if(s[s.length-1]<r){\n                s.push(r)\n                v.appendChild(dom('ul'))\n                v=v.lastChild\n            }\n            v.appendChild(li(p))\n            v=v.lastChild\n        }\n        function li(p){\n            return dom('li',a_href(p))\n        }\n        function a_href(p){\n            return dom('a',{\n                innerHTML:p.innerHTML,\n                href:location.href+'#'+p.id,\n            })\n        }\n    }\n    function star_all(e){\n        let a=e.getElementsByClassName('star')\n        for(let i=0;i<a.length;i++){\n            a[i].innerHTML=html_stars(a[i].innerHTML)\n            a[i].style.visibility='visible'\n        }\n    }\n    function tableofcontents_all(e){\n        let a=e.getElementsByClassName('tableofcontents')\n        for(let i=0;i<a.length;i++){\n            tableofcontents(a[i])\n            a[i].style.visibility='visible'\n        }\n    }\n    return({\n        star_all,\n        tableofcontents_all,\n    })\n})()\n","Blog/loadPagemodules.js":"async function loadPagemodules(blog){\n    let vals=await Promise.all([\n        module.repository.althea.Pagemodule,\n        blog._site.then(site=>\n            site.send('getPagemodules')\n        ),\n    ])\n    let\n        Pagemodule=     vals[0],\n        pagemodules=    vals[1]\n    pagemodules.map(p=>\n        blog.pagemodules.push(new Pagemodule(\n            p.id,\n            p.priority,\n            p.name,\n            p.definitions\n        ))\n    )\n    return blog\n}\nloadPagemodules\n","Blog/path.js":"module.repository.althea.site.then(site=>{\n    function calcPathByStatus(status){\n        if('pageId' in status)\n            return site.path.blog.page(status.pageId)\n        if('tagNames' in status)\n            return site.path.blog.tag(status.tagNames)\n        return site.path.blog.root\n    }\n    function getHrefByPage(page){\n        return site.path.blog.page(page.id)\n    }\n    function getHrefByTags(tags){\n        return site.path.blog.tag(tags)\n    }\n    return{\n        calcPathByStatus,\n        getHrefByPage,\n        getHrefByTags,\n    }\n})\n","Blog/prototype._anchor_addTag.js":"(async()=>{\n    let[\n        dom,\n        path,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('path.js'),\n    ])\n    function anchor_addTag(tag){\n        let\n            tagsToSelect=(this.status.tagNames||[]).slice()\n        tagsToSelect.push(tag.name)\n        let\n            a=dom('a',tag.name)\n        a.className='addTag'\n        a.href=path.getHrefByTags(tagsToSelect)\n        a.onclick=e=>{\n            if(\n                e.which!=1||\n                e.ctrlKey||\n                e.shiftKey\n            )\n                return\n            e.preventDefault()\n            e.stopPropagation()\n            this.status={\n                tagNames:tagsToSelect.slice()\n            }\n        }\n        return a\n    }\n    return anchor_addTag\n})()\n","Blog/prototype._getNext/update_to_content.js":"(async()=>{\n    let\n        Page=       await module.repository.althea.Page,\n        BlogPage=   Page.BlogPage\n    return update_to_content\n    async function update_to_content(process,pages){\n        let site=await this._site\n        pages=await Promise.all(pages.map(async p=>{\n            let page=await site.getPage(p)\n            let res=await Promise.all([\n                page.load([\n                    'preferredPagename',\n                    'page_derived_from',\n                    'page_derived_to',\n                    'author',\n                    'timestamp_insert',\n                    'timestamp_lastmodified',\n                ]),\n                page.lastversion.then(pageVersion=>pageVersion.load([\n                    'public',\n                    'title',\n                    'content',\n                ])),\n            ]).then(vals=>({\n                page:vals[0],\n                pageVersion:vals[1],\n            }))\n            page=new BlogPage(\n                this,\n                res.page.id,\n                res.pageVersion.public,\n                res.pageVersion.title\n            )\n            this.pages[page.id]=page\n            page.preferredPagename=    res.page.preferredPagename\n            page.page_derived_from=    res.page.page_derived_from\n            page.page_derived_to=      res.page.page_derived_to\n            page.content=              res.pageVersion.content\n            page.authorId=             res.page.author\n            page.timestamp_insert=     res.page.timestamp_insert\n            page.datetime_lastmodified=res.page.timestamp_lastmodified\n            let pv=await res.pageVersion.load('tags')\n            page.tags=pv.tags.sort((a,b)=>a.localeCompare(b))\n            return page\n        }))\n        await site.load\n        if(!process.continue)\n            return\n        pages.map(page=>{\n            this.emit('pageLoad',page)\n        })\n        if(process.status.pageId){\n            document.title=\n                this.pages[process.status.pageId].title+\n                ' - '+\n                site.name\n        }else{\n            document.title=site.name\n        }\n    }\n})()\n","Blog/prototype._getNext.js":"Promise.all([\n    module.shareImport('prototype._getNext/update_to_content.js')\n]).then(modules=>{\n    let update_to_content=modules[0]\n    async function _getNext(){\n        this.getting=this.getting||0\n        this.getting++\n        let\n            process={\n                status:this._status,\n                continue:1\n            }\n        this.once('statusChange',()=>\n            process.continue=0\n        )\n        let data=await this._site.then(site=>\n            site.send({\n                function:       'getSuggestedPages',\n                page:           process.status.pageId||0,\n                pageversion:    process.status.pageversionId||0,\n                tags_selected:  process.status.tagNames||[],\n                pages_loaded:   this.pages_loaded,\n            })\n        )\n        await this._loadPagemodules\n        await update_to_content.call(this,process,data.slice(0,4))\n        this.getting--\n    }\n    return _getNext\n})\n","Blog/prototype.view/BlogView.js":";(async()=>{\n    let[\n        dom,\n        install_datalist_tags_suggested,\n        createHeader,\n        keydown,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('install_datalist_tags_suggested.js'),\n        module.shareImport('createHeader.js'),\n        module.shareImport('prototype.keydown.js'),\n    ])\n    function createContents(blog){\n        let div=dom('div')\n        div.className='contents'\n        blog.on('pageLoad',page=>{\n            div.appendChild(page.view.domElement)\n        })\n        blog.on('statusChange',()=>{\n            div.innerHTML=''\n        })\n        return div\n    }\n    function createFooter(view){\n        let div=dom('div')\n        div.className='footer'\n        view.blog._site.then(async site=>{\n            let res=await site.send('getBlogFooter')\n            div.innerHTML=res\n        })\n        return div\n    }\n    function BlogView(blog){\n        this.blog=blog\n        this.div=dom('div')\n        this.div.className='blog'\n        install_datalist_tags_suggested(this)\n        {\n            let s=dom('style')\n            let u=()=>\n                this.blog._styles.map(n=>\n                    s.appendChild(n)\n                )\n            u()\n            this.blog.on('_style',u)\n            this.style=Promise.resolve(s)\n            module.get('blog.css').then(s=>\n                blog._style(document.createTextNode(s))\n            )\n        }\n        this.div.appendChild(createHeader(blog,this))\n        this.div.appendChild(createContents(blog))\n        this.div.appendChild(createFooter(this))\n    }\n    BlogView.prototype.hideSuggestedTags=function(){\n        this.tagsDiv.style.display='none'\n    }\n    BlogView.prototype.keydown=keydown\n    BlogView.prototype.setupSuggestedTags=async function(){\n        let\n            view=this,\n            blog=this.blog\n        let vals=await Promise.all([\n            module.shareImport('initialize_tags_suggested.js'),\n            module.shareImport('use_list_tags__count_suggested.js'),\n            blog._site.then(site=>\n                site.send({\n                    function:'getSuggestedTags',\n                    tags:blog.status.tagNames||[]\n                })\n            ),\n        ])\n        let\n            initialize_tags_suggested=vals[0],\n            use_list_tags__count_suggested=vals[1],\n            res=vals[2]\n        initialize_tags_suggested(view.tagsDiv)\n        use_list_tags__count_suggested(\n            view,\n            res,\n            view.tagsDiv\n        )\n        view.tagsDiv.style.display=''\n    }\n    return BlogView\n})()\n","Blog/prototype.view/blog.css":"body{\n    margin:0px;\n}\n.a_hideshow{\n    float:left;\n}\n.a_comment{\n    float:left;\n}\n.a_dfspage{\n    float:left;\n}\n.a_editpage{\n    float:left;\n}\n.a_deletepage{\n    float:left;\n}\n.a_removepage{\n    float:left;\n}\n","Blog/prototype.view/createHeader/checkSetupIndex.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    async function checkSetupIndex(blog,div){\n        if(!blog.status.tagNames)\n            return\n        let a\n        {\n            let\n                vals=await Promise.all([\n                    blog._site,\n                    getPagesByTags(),\n                ]),\n                site=vals[0],\n                pages=vals[1]\n            a=await Promise.all(pages.map(async id=>{\n                let page=await site.getPage(id)\n                let pageversion=await(await page.lastversion).load([\n                    'public',\n                    'title'\n                ])\n                return{\n                    page,\n                    public:pageversion.public,\n                    title:pageversion.title,\n                }\n            }))\n        }\n        a.sort((a,b)=>a.title.localeCompare(b.title))\n        chunks(a,12).map(a=>{\n            let ul=dom('ul')\n            ul.style.float='left'\n            for(let p of a){\n                let\n                    li=dom('li'),\n                    a=p.page.a\n                if(!p.public)\n                    a.style.color='black'\n                a.addEventListener('click',e=>{\n                    if(\n                        e.which!=1||\n                        e.ctrlKey||\n                        e.shiftKey\n                    )\n                        return\n                    e.preventDefault()\n                    e.stopPropagation()\n                    blog.status={\n                        pageId:p.page.id\n                    }\n                })\n                li.appendChild(a)\n                ul.appendChild(li)\n            }\n            div.appendChild(ul)\n        })\n        div.appendChild(createClearBothDiv())\n        function createClearBothDiv(){\n            let div=dom('div')\n            div.style.clear='both'\n            return div\n        }\n        async function getPagesByTags(){\n            return(await blog._site).send({\n                function:'getPagesByTags',\n                tags:blog.status.tagNames\n            })\n        }\n        function chunks(a,n){\n            let res=[]\n            for(let i=0;i*n<a.length;i++)\n                res.push(a.slice(i*n,(i+1)*n))\n            return res\n        }\n    }\n    return checkSetupIndex\n})()\n","Blog/prototype.view/createHeader/createInput.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function createInput(blog,view){\n        let input=dom('input')\n        input.setAttribute('list',view.datalist_input_searchForTag.id)\n        input.addEventListener('keydown',e=>{\n            if(e.keyCode!=13)\n                return\n            e.preventDefault()\n            e.stopPropagation()\n            let tagToAdd=input.value\n            input.value=''\n            let tagsToSelect=blog.status.tagNames?\n                blog.status.tagNames.slice()\n            :\n                []\n            tagsToSelect.push(tagToAdd)\n            if(e.shiftKey)\n                module.shareImport('../path.js').then(path=>{\n                    open(path.getHrefByTags(\n                        tagsToSelect\n                    ),'_blank').focus()\n                })\n            else\n                blog.status={tagNames:tagsToSelect}\n        })\n        input.addEventListener('focus',()=>{\n            view.setupSuggestedTags()\n        })\n        /*input.addEventListener('blur',()=>{\n            view.hideSuggestedTags()\n        })*/\n        return input\n    }\n    return createInput\n})()\n","Blog/prototype.view/createHeader/createNavigationBar/event.js":"({\n    onceClickOrBlurButNotMouseDown(n,listener){\n        let mousedown=false\n        let l=e=>{\n            if(mousedown)\n                return\n            n.removeEventListener('click',l)\n            n.removeEventListener('blur',l)\n            n.removeEventListener('mousedown',onmousedown)\n            listener()\n        },onmousedown=e=>{\n            mousedown=true\n            addEventListener('mouseup',e=>\n                mousedown=false\n            ,{once:true})\n        }\n        n.addEventListener('click',l)\n        n.addEventListener('blur',l)\n        n.addEventListener('mousedown',onmousedown)\n    }\n})\n","Blog/prototype.view/createHeader/createNavigationBar/userA.js":";(async()=>{\n    let[dom,event]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.event,\n    ])\n    function userA(blog,div,u){\n        let a=dom('a',u.username)\n        a.href='javascript:'\n        a.onclick=e=>{\n            e.preventDefault()\n            e.stopPropagation()\n            let n=userDiv(blog,u)\n            event.onceClickOrBlurButNotMouseDown(n,()=>div.removeChild(n))\n            dom(div,n)\n            n.focus()\n        }\n        return a\n    }\n    function userDiv(blog,u){\n        let div=dom('div',innerDiv(blog,u),{tabIndex:0})\n        div.style.position='relative'\n        div.style.outline='none'\n        div.style.height='0'\n        div.style.width='100%'\n        div.style.top='8px'\n        return div\n    }\n    function innerDiv(blog,u){\n        return dom('div',\n            logoutA(blog),\n            dom('br'),\n            dom('a','Profile',{href:`user/${u.username}`}),\n            u.isadmin&&[\n                dom('br'),\n                dom('a','Drive',{href:`home/${u.username}`}),\n                dom('br'),\n                dom('a','Settings',{href:'settings'}),\n                dom('br'),\n                dom('a','New Page',{href:'newpage'}),\n            ],n=>{\n                n.style.margin='0 auto'\n                n.style.backgroundColor='white'\n                n.style.border='1px solid lightgray'\n            }\n        )\n    }\n    function logoutA(blog){\n        let a=dom('a','Logout')\n        a.href='javascript:'\n        a.onclick=async e=>{\n            e.preventDefault()\n            ;(await blog._site).logout\n        }\n        return a\n    }\n    return userA\n})()\n\n","Blog/prototype.view/createHeader/createNavigationBar.js":"module.repository.event=module.shareImport('createNavigationBar/event.js')\n;(async()=>{\n    let[\n        dom,\n        event,\n        userA,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.event,\n        module.shareImport('createNavigationBar/userA.js'),\n    ])\n    function createNavigationBar(view){\n        let\n            blog=view.blog,\n            div=dom('div',{className:'navigationBar'},menuA())\n        blog._site.then(site=>{\n            perUser(site,async u=>{\n                await u.load(['isAnonymous','username','isadmin'])\n                let a=u.isAnonymous?loginA():userA(blog,div,u)\n                div.appendChild(a)\n                site.once('userChange',()=>{\n                    div.removeChild(a)\n                })\n            })\n        })\n        return div\n        function aboutA(){\n            let a=dom('a','About')\n            a.href='about'\n            return a\n        }\n        function perUser(site,func){\n            site.currentUser.then(func)\n            site.on('userChange',()=>{\n                site.currentUser.then(func)\n            })\n        }\n        function loginA(){\n            let a=dom('a','Login')\n            a.href='javascript:'\n            a.onclick=async e=>{\n                e.preventDefault()\n                e.stopPropagation()\n                ;(await blog._site).showLoginForm\n            }\n            return a\n        }\n        function menuA(){\n            let a=dom('a','Menu')\n            a.href='javascript:'\n            a.onclick=e=>{\n                e.preventDefault()\n                e.stopPropagation()\n                let n=menuDiv()\n                event.onceClickOrBlurButNotMouseDown(n,()=>\n                    div.removeChild(n)\n                )\n                div.appendChild(n)\n                n.focus()\n            }\n            return a\n        }\n        function menuDiv(){\n            let div=dom('div',innerDiv())\n            div.style.position='relative'\n            div.style.height='0'\n            div.style.width='100%'\n            div.style.outline='none'\n            div.style.top='8px'\n            div.tabIndex=0\n            return div\n            function innerDiv(){\n                let div=dom('div',aboutA())\n                div.style.margin='0 auto'\n                div.style.backgroundColor='white'\n                div.style.border='1px solid lightgray'\n                return div\n            }\n        }\n    }\n    return createNavigationBar\n})()\n","Blog/prototype.view/createHeader/setupSelectedTagsDiv.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function setupSelectedTagsDiv(blog,div){\n        if(!('tagNames' in blog.status))\n            return\n        blog.status.tagNames.map((t,i)=>{\n            div.appendChild(span())\n            function span(){\n                let span=dom('span',\n                    t+' ',\n                    a()\n                )\n                span.id='span_tag_'+t\n                span.className='tag_selected'\n                span.style.marginRight='4px'\n                return span\n            }\n            function a(){\n                let anchor=dom('a','-')\n                let tagsToSelect=(blog.status.tagNames||[]).slice()\n                tagsToSelect.splice(i,1)\n                anchor.href='javascript:'\n                anchor.addEventListener('click',e=>{\n                    e.preventDefault()\n                    e.stopPropagation()\n                    blog.status=tagsToSelect.length==0?{}:{\n                        tagNames:tagsToSelect\n                    }\n                })\n                return anchor\n            }\n        })\n    }\n    return setupSelectedTagsDiv\n})()\n","Blog/prototype.view/createHeader.js":"(async()=>{\n    let[\n        dom,\n        checkSetupIndex,\n        createInput,\n        setupSelectedTagsDiv,\n        createNavigationBar,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('createHeader/checkSetupIndex.js'),\n        module.shareImport('createHeader/createInput.js'),\n        module.shareImport('createHeader/setupSelectedTagsDiv.js'),\n        module.shareImport('createHeader/createNavigationBar.js'),\n    ])\n    function createHeader(blog,view){\n        let div=dom('div',\n            createTitle(),\n            createTagline(),\n            createNavigationBar(view),\n            createSearchForTags(view),\n            createTags(view),\n            createIndex()\n        )\n        div.className='header'\n        return div\n        function createTitle(){\n            let div=dom('div')\n            div.className='title'\n            ;(async()=>{\n                let site=await blog._site\n                await site.load\n                div.appendChild(\n                    createA(\n                        site.clientUrlRoot,\n                        site.bannerTitle\n                    )\n                )\n            })()\n            return div\n            function createA(clientUrlRoot,bannerTitle){\n                let a=dom('a')\n                a.href=''\n                a.onclick=e=>{\n                    if(\n                        e.which!=1||\n                        e.ctrlKey||\n                        e.shiftKey\n                    )\n                        return\n                    e.preventDefault()\n                    e.stopPropagation()\n                    blog.status={}\n                }\n                a.textContent=bannerTitle\n                return a\n            }\n        }\n        function createTagline(){\n            let div=dom('div')\n            div.className='tagline'\n            blog._site.then(s=>s.load).then(site=>{\n                div.innerHTML=site.blogTagline\n            })\n            return div\n        }\n        function createSearchForTags(view){\n            let div=dom('div',\n                createSelectedTagsDiv(),\n                view.input=createInput(blog,view),\n                view.datalist_input_searchForTag\n            )\n            div.className='searchForTags'\n            return div\n            function createSelectedTagsDiv(){\n                let div=dom('div')\n                div.className='selectedTags'\n                setupSelectedTagsDiv(blog,div)\n                blog.on('statusChange',()=>{\n                    div.innerHTML=''\n                    setupSelectedTagsDiv(blog,div)\n                })\n                return div\n            }\n        }\n        function createTags(view){\n            let div=dom('div')\n            div.className='tags'\n            blog.on('statusChange',()=>{\n                div.innerHTML=''\n                if(document.activeElement==view.input)\n                    view.setupSuggestedTags()\n            })\n            view.tagsDiv=div\n            return div\n        }\n        function createIndex(){\n            let div=dom('div')\n            div.className='index'\n            checkSetupIndex(blog,div)\n            blog.on('statusChange',()=>{\n                div.innerHTML=''\n                checkSetupIndex(blog,div)\n            })\n            return div\n        }\n    }\n    return createHeader\n})()\n","Blog/prototype.view/initialize_tags_suggested.js":"function initialize_tags_suggested(div_tags){\n    div_tags.style.display='none'\n    div_tags.innerHTML=''\n}\ninitialize_tags_suggested\n","Blog/prototype.view/install_datalist_tags_suggested/randomId.js":"function randomId(length){\n    let res=''\n    while(res.length<length)\n        res+=Math.random().toString(36).slice(2)\n    return 'a'+res\n}\nrandomId\n","Blog/prototype.view/install_datalist_tags_suggested.js":"(async()=>{\n    let[\n        dom,\n        randomId,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.shareImport('install_datalist_tags_suggested/randomId.js'),\n    ])\n    return install_datalist_tags_suggested\n    function install_datalist_tags_suggested(blogView){\n        blogView.datalist_input_searchForTag=dom('datalist')\n        // known best solution\n        blogView.datalist_input_searchForTag.id=randomId(16)\n    }\n})()\n","Blog/prototype.view/prototype.keydown.js":"module.shareImport('../path.js').then(path=>{\n    return keydown\n    function keydown(e){\n        let\n            blog=this.blog,\n            view=this\n        if(0<=[\n            'INPUT',\n            'TEXTAREA',\n        ].indexOf(\n            document.activeElement.tagName\n        ))\n            return\n        if(!e.ctrlKey&&!e.shiftKey){\n            if(handle())\n                pdAndSp()\n        }else if(!e.ctrlKey&&e.shiftKey){\n            if(handleShift())\n                pdAndSp()\n        }\n        function pdAndSp(){\n            e.preventDefault()\n            e.stopPropagation()\n        }\n        function handle(){\n            // e h l o t\n            if(e.keyCode==69){ // e\n                let x=currentPage()\n                if(!x)\n                    return\n                ;(async()=>{\n                    let u=await blog._currentUser\n                    if(u.isadmin)\n                        blog.emit('location',blog.pages[x.id].getHref()+'/edit')\n                })()\n            }else if(e.keyCode==72){ // h\n                blog.status={}\n            }else if(e.keyCode==76){ // l\n                Promise.all([\n                    blog._currentUser,\n                    blog._site,\n                ]).then(vals=>{\n                    let\n                        user=vals[0],\n                        site=vals[1]\n                    if(user.isAnonymous)\n                        site.showLoginForm\n                    else\n                        site.logout\n                })\n            }else if(e.keyCode==79){ // o\n                let x=currentPage()\n                if(!x)\n                    return\n                blog.status={\n                    pageId:x.id\n                }\n            }else if(e.keyCode==84){ // t\n                view.input.focus()\n            }else{\n                return false\n            }\n            return true\n        }\n        function handleShift(){\n            // E H O\n            if(e.keyCode==69){ // E\n                let x=currentPage()\n                if(!x)\n                    return\n                open(\n                    blog.pages[x.id].getHref()+'/edit',\n                    '_blank'\n                ).focus()\n            }else if(e.keyCode==72){ // H\n                ;(async()=>{\n                    let user=await blog._currentUser\n                    await user.load('username')\n                    blog.emit('location','home/'+user.username)\n                })()\n            }else if(e.keyCode==79){ // O\n                let x=currentPage()\n                if(!x)\n                    return\n                open(path.getHrefByPage(blog.pages[x.id]),'_blank').focus()\n            }else\n                return false\n            return true\n        }\n        function currentPage(){\n            let x=blog.pages[blog.status.pageId]\n            Object.keys(blog.pages).map(i=>{\n                let e=blog.pages[i]\n                if(!e.div)\n                    return\n                if(\n                    e.div.getBoundingClientRect().top<1&&(\n                        !x||\n                        x.div.getBoundingClientRect().top<\n                        e.div.getBoundingClientRect().top\n                    )\n                )\n                    x=e\n            })\n            return x\n        }\n    }\n})\n","Blog/prototype.view/use_list_tags__count_suggested.js":"(async()=>{\n    let dom=await module.repository.althea.dom\n    function use_list_tags__count_suggested(blogView,list,div){\n        list.sort((a,b)=>\n            a.name.localeCompare(b.name)\n        )\n        blogView.datalist_input_searchForTag.innerHTML=''\n        list.map(e=>{\n            let o=dom('option')\n            o.value=e.name\n            blogView.datalist_input_searchForTag.appendChild(o)\n        })\n        let tagsToSelect=(blogView.blog.status.tagNames||[]).slice()\n        list.map((t,i)=>{\n            if(i%12==0)\n                div.appendChild(ul())\n            if((blogView.blog.status.tagNames||[]).indexOf(t.name)!==-1)\n                return\n            div.lastChild.appendChild(li(t))\n        })\n        div.appendChild(div_clearboth())\n        function ul(){\n            let ul=dom('ul')\n            ul.style.float='left'\n            return ul\n        }\n        function li(t){\n            return dom('li',a(t))\n        }\n        function a(t){\n            tagsToSelect.push(t.name)\n            let a=blogView.blog._anchor_addTag(t)\n            tagsToSelect.pop()\n            a.innerHTML+=\n                '&nbsp;<span style=color:purple>('+\n                t.count+')</span>'\n            return a\n        }\n        function div_clearboth(){\n            let div=dom('div')\n            div.style.clear='both'\n            return div\n        }\n    }\n    return use_list_tags__count_suggested\n})()\n","Blog/prototype.view.js":"(async()=>{\n    let BlogView=await module.shareImport('prototype.view/BlogView.js')\n    return{get(){\n        let view=new BlogView(this)\n        return view\n    }}\n})()\n"}).map(([k,v])=>module.static(k,v));let loadPagemodules=module.shareImport('Blog/loadPagemodules.js')
;(async modules=>{
    let[
        EventEmmiter,
        Page,
        _getNext,
        _anchor_addTag,
        view,
        path,
    ]=await Promise.all([
        module.repository.althea.EventEmmiter,
        module.shareImport('Blog/Page.js'),
        module.shareImport('Blog/prototype._getNext.js'),
        module.shareImport('Blog/prototype._anchor_addTag.js'),
        module.shareImport('Blog/prototype.view.js'),
        module.shareImport('Blog/path.js'),
    ])
    function Blog(site,status){
        EventEmmiter.call(this)
        this._site=site
        this._status=status
        this.pages={}
        this.pagemodules=[]
        this.pages_loaded=[]
        // refresh on userChange
        this._site.then(site=>{
            site.on('userChange',()=>{
                this.status=this.status
            })
        })
        // start add event listeners
        this.on('newListener',(event,listener)=>
            this.emit(event+'ListenerAdd',listener)
        )
        this.on('pageLoadListenerAdd',listener=>{
            for(let i in this.pages)
                listener(this.pages[i])
        })
        this.on('pageContentLoad',Page.star_all)
        this.on('pageContentLoad',Page.tableofcontents_all)
        // end add event listeners
        this.load=this._site.then(site=>
            site.loadPlugins('blog',s=>eval(s))
        )
        this._getNext()
        this._styles=[]
    }
    Object.setPrototypeOf(Blog.prototype,EventEmmiter.prototype)
    Blog.prototype._anchor_addTag=_anchor_addTag
    Object.defineProperty(Blog.prototype,'_currentUser',{async get(){
        return(await this._site).currentUser
    }})
    Blog.prototype._getNext=_getNext
    Object.defineProperty(Blog.prototype,'_loadPagemodules',{async get(){
        return this._loadPagemodules_||(this._loadPagemodules_=
            (await loadPagemodules)(this)
        )
    }})
    Blog.prototype._style=function(n){
        this._styles.push(n)
        this.emit('_style')
    }
    Object.defineProperty(Blog.prototype,'status',{get(){
        return this._status
    },set(val){
        this._status=val
        this.pages={}
        this.pages_loaded=[]
        this.emit('statusChange')
        this._getNext()
    }})
    Object.defineProperty(Blog.prototype,'view',view)
    Blog.prototype.path=path
    return Blog
})()
